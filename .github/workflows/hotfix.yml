name: Hotfix Release

on:
  workflow_dispatch:
    inputs:
      hotfix_description:
        description: 'Description of the hotfix'
        required: true
        type: string
      target_branch:
        description: 'Target branch for hotfix'
        required: true
        default: 'main'
        type: string

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  hotfix-release:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      packages: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.inputs.target_branch }}
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install -r requirements-dev.txt

      - name: Run critical tests
        run: |
          pytest tests/ -v --tb=short

      - name: Determine hotfix version
        id: version
        run: |
          python -c "
          import sys
          sys.path.append('.')
          from version import get_version, get_next_patch_version
          
          current_version = get_version()
          hotfix_version = get_next_patch_version()
          
          print(f'Current version: {current_version}')
          print(f'Hotfix version: {hotfix_version}')
          
          with open('$GITHUB_OUTPUT', 'a') as f:
              f.write(f'version={hotfix_version}\n')
              f.write(f'current_version={current_version}\n')
          "

      - name: Update version for hotfix
        run: |
          sed -i 's/__version__ = ".*"/__version__ = "${{ steps.version.outputs.version }}"/' version.py
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add version.py
          git commit -m "hotfix: ${{ github.event.inputs.hotfix_description }} (v${{ steps.version.outputs.version }})"

      - name: Create hotfix tag
        run: |
          git tag -a "v${{ steps.version.outputs.version }}" -m "Hotfix v${{ steps.version.outputs.version }}: ${{ github.event.inputs.hotfix_description }}"
          git push origin "v${{ steps.version.outputs.version }}"

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=raw,value=latest
            type=raw,value=${{ steps.version.outputs.version }}
            type=raw,value=hotfix-${{ steps.version.outputs.version }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          build-args: |
            SERVICE_VERSION=${{ steps.version.outputs.version }}

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: v${{ steps.version.outputs.version }}
          name: Hotfix v${{ steps.version.outputs.version }}
          token: ${{ secrets.GITHUB_TOKEN }}
          body: |
            ## Hotfix Release v${{ steps.version.outputs.version }}
            
            **Previous Version:** v${{ steps.version.outputs.current_version }}
            
            ### Hotfix Description
            ${{ github.event.inputs.hotfix_description }}
            
            ### Docker Image
            ```bash
            docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.version.outputs.version }}
            ```
            
            ### Verification
            This hotfix has been automatically tested and verified before release.
          draft: false
          prerelease: false

      - name: Notify on success
        run: |
          echo "‚úÖ Hotfix v${{ steps.version.outputs.version }} released successfully"
          echo "üê≥ Docker image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.version.outputs.version }}"
