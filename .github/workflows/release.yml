name: Release and Deploy

on:
  workflow_dispatch:
    inputs:
      release_type:
        description: 'Release type'
        required: true
        default: 'patch'
        type: choice
        options:
          - patch
          - minor
          - manual
      manual_version:
        description: 'Manual version (only for manual release type, format: YYYY.MM.PATCH)'
        required: false
        type: string
  schedule:
    # Monthly release on first Monday at 09:00 UTC
    - cron: '0 9 * * 1'

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  determine-version:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.version }}
      is_scheduled: ${{ steps.check.outputs.is_scheduled }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Check if scheduled release
        id: check
        run: |
          if [ "${{ github.event_name }}" = "schedule" ]; then
            # Check if this is the first Monday of the month
            FIRST_MONDAY=$(date -d "$(date +%Y-%m-01) +$((1 + (7 - $(date -d "$(date +%Y-%m-01)" +%u)) % 7)) days" +%Y-%m-%d)
            TODAY=$(date +%Y-%m-%d)
            if [ "$TODAY" = "$FIRST_MONDAY" ]; then
              echo "is_scheduled=true" >> $GITHUB_OUTPUT
            else
              echo "is_scheduled=false" >> $GITHUB_OUTPUT
              exit 0
            fi
          else
            echo "is_scheduled=false" >> $GITHUB_OUTPUT
          fi

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'

      - name: Determine version
        id: version
        run: |
          python -c "
          import sys
          sys.path.append('.')
          from version import get_version, get_next_patch_version, get_next_minor_version
          from datetime import datetime
          
          current_version = get_version()
          
          if '${{ github.event_name }}' == 'schedule' or '${{ github.event.inputs.release_type }}' == 'minor':
              new_version = get_next_minor_version()
          elif '${{ github.event.inputs.release_type }}' == 'patch':
              new_version = get_next_patch_version()
          elif '${{ github.event.inputs.release_type }}' == 'manual':
              new_version = '${{ github.event.inputs.manual_version }}'
              if not new_version:
                  print('Manual version is required for manual release type')
                  sys.exit(1)
          else:
              new_version = current_version
          
          print(f'Current version: {current_version}')
          print(f'New version: {new_version}')
          
          with open('$GITHUB_OUTPUT', 'a') as f:
              f.write(f'version={new_version}\n')
          "

  quality-gates:
    runs-on: ubuntu-latest
    needs: determine-version
    if: needs.determine-version.outputs.is_scheduled != 'false' || github.event_name == 'workflow_dispatch'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install -r requirements-dev.txt

      - name: Run tests
        run: |
          pytest --cov=./ --cov-report=xml --cov-fail-under=80

      - name: Security scan
        run: |
          pip install safety bandit
          safety check
          bandit -r . -x tests/

      - name: Lint code
        run: |
          pip install flake8
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics

  build-and-release:
    runs-on: ubuntu-latest
    needs: [determine-version, quality-gates]
    if: needs.determine-version.outputs.is_scheduled != 'false' || github.event_name == 'workflow_dispatch'
    permissions:
      contents: write
      packages: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'

      - name: Update version
        run: |
          sed -i 's/__version__ = ".*"/__version__ = "${{ needs.determine-version.outputs.version }}"/' version.py
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add version.py
          git commit -m "chore: bump version to ${{ needs.determine-version.outputs.version }}"

      - name: Create Git tag
        run: |
          git tag -a "v${{ needs.determine-version.outputs.version }}" -m "Release v${{ needs.determine-version.outputs.version }}"
          git push origin "v${{ needs.determine-version.outputs.version }}"

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=raw,value=latest
            type=raw,value=${{ needs.determine-version.outputs.version }}
            type=raw,value={{date 'YYYY.MM'}}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          build-args: |
            SERVICE_VERSION=${{ needs.determine-version.outputs.version }}

      - name: Generate release notes
        id: release_notes
        run: |
          echo "## Release v${{ needs.determine-version.outputs.version }}" > release_notes.md
          echo "" >> release_notes.md
          echo "### Changes" >> release_notes.md
          git log --pretty=format:"- %s" $(git describe --tags --abbrev=0 HEAD~1)..HEAD >> release_notes.md || echo "- Initial release" >> release_notes.md
          echo "" >> release_notes.md
          echo "### Docker Image" >> release_notes.md
          echo "\`\`\`bash" >> release_notes.md
          echo "docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ needs.determine-version.outputs.version }}" >> release_notes.md
          echo "\`\`\`" >> release_notes.md

      - name: Create GitHub Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ needs.determine-version.outputs.version }}
          release_name: Release v${{ needs.determine-version.outputs.version }}
          body_path: release_notes.md
          draft: false
          prerelease: false
